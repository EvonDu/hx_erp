<?phpinclude_once(dirname(BASEPATH).'/inherit/BaseModel.php');class Allocate_model extends BaseModel{    /**     * @var table     */    protected $table = "t_sell_allocate";    protected $pk = "id";    /**     * @fields     */    public $id,$order_num,$order_id,$create_at,$create_user_id,$status,$remark,$total_num;    /**     * Allocate_model constructor.     */    function __construct(){        $this->load->model('sell/order/Order_model',"m_order",true);        $this->load->model('sell/order/OrderSpu_model',"m_spu",true);        $this->load->model('sell/order/OrderSku_model',"m_sku",true);        $this->load->model('sell/allocate/AllocateItem_model',"m_item",true);    }    /**     * @return object     */    static function describe(){        $data = (object)array();        $data->desc = "报货单";        $data->name = "allocate";        return $data;    }    /**     * @return array     */    static function attributeLabels()    {        return [            "id"=>"ID",            "order_id"=>"销售单ID",            "order_num"=>"报货单号",            "create_at"=>"报货时间",            "create_user_id"=>"报货用户ID",            "status"=>"状态",            "statusName"=>"状态",            "remark"=>"备注",            "sell_order_num"=>'销售单号',            "client_name"=>'客户名称',            "client_phone"=>'客户电话',            "total_num"=>'报货数量',        ];    }    /**     * @return string     */    public function getStatusName(){        switch($this->status){            case 0:                return "未完成";            case 1:                return "已完成";            default:                return "其他";        }    }    /**     * 获取Sku列表(包含已经配货数量)     * bool $getEndNum：是否查询已配货数量     * bool $filterSelf：是否过滤掉自己的配货数量     */    public function getSkuList($getEndNum=true,$filterSelf=true){        //获取所有项目        $allocate_items = $this->m_item->searchAll(["allocate_id"=>$this->id])->list;        //获取销售单SKU信息        $order_items = $this->m_sku->searchAll(["order_id"=>$this->order_id])->list;        //获取已配数量        if($getEndNum)            $allocated = $this->m_item->getAllocateStatus($this->order_id,$filterSelf?$this->id:null);        //组装列表        $list = array();        foreach($order_items as $iorder){            foreach($allocate_items as $iallocate){                if($iorder->id == $iallocate->order_sku_id){                    $item = $iallocate;                    //拼凑显示信息                    $item->size = $iorder->size;                    $item->color = $iorder->color;                    //SPU内容                    $item->spu = (object)array(                        "order_id"=>$item->order_id,                        "order_spu_id"=>$item->order_spu_id,                        "spu_id"=>$item->spu_id,                    );                    //SKU内容                    $item->sku = (object)array(                        "order_id"=>$item->order_id,                        "order_sku_id"=>$item->order_sku_id,                        "sku_id"=>$item->sku_id,                        "size" => $iorder->size,                        "color" => $iorder->color                    );                    //总数量                    $item->num_sum = $iorder->num;                    //设置已经配置数量                    if($getEndNum)                        $item->num_end = isset($allocated[$iallocate->order_sku_id])?(int)$allocated[$iallocate->order_sku_id]:0;                    //添加到列表                    $list[] = $item;                }            }        }        //返回        return $list;    }    /**     * 获取Sku可配货列表     */    public function getSkuCanAllocate(){        $list = $this->getSkuList(true,true);        $result = array();        foreach ($list as $item){            $result[$item->sku_id]=$item->num_sum - $item->num_end;        }        return $result;    }    /**     * 生成销售单号     */    public function createOrderNum(){        list($t1, $t2) = explode(' ', microtime());        $time = (float)sprintf('%.0f',(floatval($t1)+floatval($t2))*1000);        return "HXA".$time;    }    /**     * 添加订单(事务)     */    public function createOrder($data){        //开始事务        $this->db->trans_strict(FALSE);        $this->db->trans_begin();        //执行        try {            //获取最新的配货列表(防止并发)            $order = $this->m_order->get($data["order_id"]);            $canlist = $order->getSkuCanAllocate();            //保存订单            $this->load($data);            $this->save();            //遍历列表            if (!empty($data["list"]) && is_array($data["list"])) {                foreach ($data["list"] as $item) {                    if($item["num"] > (int)($canlist[$item["sku_id"]])) {                        throw new Exception("超过配货数量");                    }                    $item_model = $this->m_item->_new();                    $item_model->load($item);                    $item_model->allocate_id = $this->id;                    $item_model->save();                }            }            //提交并返回            $this->db->trans_commit();            return true;        }catch (Exception $e){            //回滚并返回            $this->db->trans_rollback();            return false;        }    }    /**     * 添加订单(事务)     */    public function updateOrder($data){        //开始事务        $this->db->trans_strict(FALSE);        $this->db->trans_begin();        //执行        try{            //获取最新的配货列表(防止并发)            $allocate = $this->model->get($data["id"]);            $canlist = $allocate->getSkuCanAllocate();            //保存订单            $order = $this->get($data["id"]);            $order->load_safe($data);            $order->save();            //遍历列表            if(!empty($data["list"]) && is_array($data["list"])) {                foreach ($data["list"] as $item) {                    if($item["num"] > (int)($canlist[$item["sku_id"]])) {                        throw new Exception("超过配货数量");                    }                    $item_model = $this->m_item->_new();                    $item_model->load_safe($item);                    $item_model->save();                }            }            //提交并返回            $this->db->trans_commit();            return true;        }catch (Exception $e){            //回滚并返回            $this->db->trans_rollback();            return false;        }    }    /**     * 联表查询     * @param int $page     * @param int $size     * @param array $condition     * @param array $sort     * @return object     */    public function searchLinkSell($page=1,$size=20,$condition=[],$sort=[]){        //按照加官，使用sql前所有字段加F        $condition = $this->addPrefixKeyValue($condition);        $sort = $this->addPrefixKeyValue($sort);        //查找数量        //$count = $this->db->where($condition)->count_all_results($this->table);        $count = $this->getCount($condition);        //条件筛选        $start = ($page-1)*$size;        $select = $this->db            ->select(array(                "$this->table.*",                "t_sell_order.Forder_num as Fsell_order_num",                "t_client.Fname as Fclient_name",                "t_client.Fphone as Fclient_phone",            ))            ->where($condition)            ->limit($size,$start);        //->get($this->table);        //排序        foreach($sort as $key=>$value)            $select = $select->order_by($key,$value);        //连接表        $select = $select            ->join('t_sell_order', $this->table.'.Forder_id = t_sell_order.Fid', 'left')            ->join('t_client','t_sell_order.Fclient_id = t_client.Fid', 'left');        //查询表        $select = $select->get($this->table);        //构成返回结果        $list = array();        foreach($select->result() as $data){            $item = $this->_new();            $item->load((array)$data);            $list[] = $item;        }        //返回        $result = (object)array();        $result->list = $list;        $result->count = $count;        $result->model = $this;        return $result;    }    /**     * 保存前执行     */    protected function beforeSave()    {        //设置时区        date_default_timezone_set('Asia/Shanghai');        //如果是新增        if(empty($this->id)){            $this->status = 0;            $this->create_at = time();            $this->create_user_id = $this->session->uid;        }        //父类方法        parent::beforeSave(); // TODO: Change the autogenerated stub    }}?>    